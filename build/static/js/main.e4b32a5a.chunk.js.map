{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","services_notes","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fonStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","message","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","App_Footer","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.e4b32a5a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note,toggleImportance}) => {\r\n  const label = note.important\r\n    ? 'make not impotant' : 'make impotant'\r\n    return (\r\n      <li className = 'note'>{note.content} doobie baby\r\n      <button onClick={toggleImportance}>{label}</button></li>\r\n    )\r\n  }\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content:'Note that aint saved to no server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n  }\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\nreturn request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\nreturn request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default {getAll, create, update}","import { useState,useEffect } from 'react'\nimport Note from './components/Note'\nimport React from 'react'\nimport noteService from './services/notes'\n\n\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color:'green',\n    fonStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note apa, Dp of Stuff using all</em>\n    </div>\n  )\n}\n\n// Defines states\nconst App = () => {\n  const [notes,setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('ERROR ERROR DELETE DELETE')\n\n  const Notification = ({message}) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className='error'>\n        {message}\n      </div>\n    )\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note,important: !note.important}\n\n    noteService\n      .update(id,changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `the note '${note.content}' was already deleted from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        },5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n    console.log(`importnace of ${id} needs to be taggled`);\n  }\n\n\n// use effect of hook(get notes), do on first render \n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  },[])\n\n  console.log('render',notes.length,'notes')\n\n  // toggles between showing all notes and filtering by important based on \"showAll\" variable\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  // function for note change to set value to changed text\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n// Adds NOTES\n  const addNote = (event) => {\n    // prevents form from reloading browser when submitting form\n    event.preventDefault()\n      //make noteobject for note insertion\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n        //needs key for concat, key is generated serverside for POST\n      }\n\n      //add new note to notes (client side only, does not add to server since doesn't do a post request)\n      //setNotes(notes.concat(noteObject))\n\n        noteService\n          .create(noteObject)\n          .then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        })\n\n\n      \n  }\n\n  return (\n    // html portion\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        {/* Button that toggles showAll variable on click*/}\n        <button onClick={() => setShowAll(!showAll)}>\n          {/* Change button value depending on value of showAll*/}\n          show {showAll ? 'IMPTENT': 'ALLs'}\n        </button>\n      </div>\n      <ul>\n        {/* makes individual html objects based on each note */}\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      {/*on submitting button, add note*/}\n      <form onSubmit={addNote}>\n        {/*default value of newNote, sets input value on change*/}\n        <input \n        value={newNote}\n        onChange={handleNoteChange}/>\n        <button type='submit'>savea</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\n\n\nReactDOM.createRoot(document.getElementById('root')).render(<App/>)\n"],"sourceRoot":""}